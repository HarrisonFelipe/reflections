What happens when you initialize a repository? Why do you need to do it?

When you initialiaze a repository, no commits are made in the repository.
You need to do this so in the future, you can make commits to save version of your work. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is different because it holds files waiting to be committed. This
differes from the repository because the repository holds different committed and saved
version of a file, while the staging area prepares the files to be committed. 

How can you use the staging area to make sure you have one commit per logical
change?

Instead of commiting all your chagned files, you can add which specific files you want 
to the staging area so you can choose what you want to commit. 

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

If you wanted to try experimental verison of things, you could create them in a branch so they dont'
impact the rest of your project. 

How do the diagrams help you visualize the branch structure?

The diagrams help you understand what is reachable and is not reachable in a branch, as they can only reach backwards. 

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

When merging two branches together, the new merged point will follow the version histories of 
both of the merged branches. 

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

Automatic merging is good because it saves your work if you forget to, helping reduce human error.
The con of automatic merges is that sometimes there will be a merge when you don't want there to be one. 